
创建标示:

因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。

注意：git config  --global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，

当然你也可以对某个仓库指定的不同的用户名和邮箱。

git config --global user.name "tiger-lhc"
git config --global user.email "lihucheng01@163.com"

=============================


1. 通过命令 git init 把这个目录变成git可以管理的仓库

2.把文件添加到版本库中。

　首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，
比如txt文件，网页，所有程序的代码等，Git也不列外，
版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，
虽能也能由版本控制系统管理，但没法跟踪文件的变化，
只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，
但是到底改了啥，版本控制也不知道。

在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111
a.使用命令 git add readme.txt添加到暂存区里面去

b.使用命令 git commit告诉Git，把文件提交到仓库。

git commit -m "ddd"  提交注释

c.通过命令git status来查看是否还有文件未提交

d.使用如下命令：git diff readme.txt 查看改动

e.知道了对readme.txt文件做了什么修改后，
我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步
(第一步是git add  readme.txt 第二步是：git commit)。

====
历史记录，如何查呢？我们现在可以使用命令 git log 
果嫌显示的信息太多的话，我们可以使用命令 git log -–pretty=oneline
====

====版本回退操作===
git reset  --hard HEAD^
如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推
那如果要回退到前100个版本的话，使用上面的方法肯定不方便，
我们可以使用下面的简便命令操作：git reset  --hard HEAD~100 

查看内容 cat readme.txt

通过如下命令即可获取到版本号：git reflog 

git reset  --hard 版本号 回复版本号

三：理解工作区与暂存区的区别？

工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。
或者以后需要再新建的目录文件等等都属于工作区范畴。

版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。
其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，
还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。

第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。

第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。


四：Git撤销修改和删除文件操作。

在我未提交之前，我发现添加6666666666内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：

　　第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。

　　第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset  --hard HEAD^

 使用 git checkout  -- file 可以丢弃工作区的修改 === 即撤销

1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。

2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。

vi readme.txt modify 66666
git add readme.txt  -- 添加到暂存区
vi readme.txt modify 77777
git checkout -- readme.txt  -- 撤销未添加到暂存区的内容
注意：命令git checkout -- readme.txt 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。
--------------------------------------------------------
四：删除文件。

rm b.txt

如果我想在版本库中恢复此文件如何操作呢？

　只要没有commit之前，可以使用如下命令 git checkout  -- b.txt

  在commit后,即提交后使用 git checkout b.txt
--------------------------------------------------------
五：远程仓库。

第一步：创建SSH Key。

ssh-keygen -t rsa [-b 4096] -C "your_email@example.com"

1. ssh-keygen -t rsa -C "lihucheng01@163.com"
或 
ssh-keygen -t rsa -b 4096 -C "lihucheng01@163.com" 
#将公钥拷贝到github中

二、把本地库的内容推送到远程库
1.create a new repository on the command line 本地库不存在

echo "# banana" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/tiger-lhc/banana.git
git push -u origin master

2.push an existing repository from the command line  本地库存在

git remote add origin https://github.com/tiger-lhc/banana.git
git push -u origin master

3.import code from another repository

You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。

由于远程库是空的，我们第一次推送master分支时，加上了–u 参数，
Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，

在以后的推送或者拉取时就可以简化命令。推送成功后，
可以立刻在github页面中看到远程库的内容已经和本地一模一样了


从现在起，只要本地作了提交，就可以通过如下命令：

git push origin master

===clone==
克隆一个本地仓库

git clone https://github.com/tiger-lhc/testgit 

六：创建与合并分支。

git checkout 命令加上 –b 参数表示创建并切换到分支

git checkout -b dev 
相当于:

git branch dev 创建分支
git checkout dev 切换分支
git branch 查看分支

git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。

合并分支

现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev

------------------------------------------------------------------
注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，
也就是直接把master指向dev的当前提交，所以合并速度非常快。
------------------------------------------------------------------

git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，
可以看到，和dev分支最新提交的是完全一样的。


　总结创建与合并分支命令如下：

　　查看分支：git branch

　　创建分支：git branch name

　　切换分支：git checkout name

　　创建+切换分支：git checkout –b name

　　合并某分支到当前分支：git merge name

　　删除分支：git branch –d name

===================================================

1.如何解决冲突

Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，其中<<<HEAD是指主分支修改的内容，
>>>>>fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存


 2.分支管理策略。

　　通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，
会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。//ff -->Fast forward
首先我们来做demo演示下：

    创建一个dev分支。
    修改readme.txt内容。
    添加到暂存区。
    切换回主分支(master)。
    合并dev分支，使用命令 git merge –no-ff  -m “注释” dev  //meger made by the "recutsive"（递归）strategy
    查看历史记录

分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，
一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，
干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。

查看log
git log --graph --pretty=oneline --abbrev-commit

七：bug分支

1.将当前工作现场即当前分支(dev) ”隐藏起来”，等以后恢复现场后继续工作。
git stash 

2.在master分支上创建一个临时分支issue-404分支来修复bug。

git checkout -b issue-404
修改完后.删除临时分支
git branch -d issue-404

3.工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：

git checkout dev

a. git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。
b.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。
1.git stash list 查看

---------------
2.git stash apply
 git stash drop

或 git stash pop
----------------

------------------
WIP ---  Working In Process  establish

八：多人协作。

当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，
并且远程库的默认名称是origin。

1.要查看远程库的信息 使用 git remote  --origin
2.要查看远程库的详细信息 使用 git remote –v

origin https://github.com/tiger-lhc/banana.git (fetch) 抓取
origin https://github.com/tiger-lhc/banana.git (push)  推送


A.推送分支：

      a.1 推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：

      a.2 使用命令 git push origin master

如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev

那么一般情况下，那些分支要推送呢？

    a.3 master分支是主分支，因此要时刻与远程同步。
   
    a.4 一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。

二：抓取分支：

多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，
可以在另一台电脑上（注意要把SSH key添加到github上)

或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2

1.首先要把dev分支也要推送到远程去。

2.cd ../ --> mkdir testgit2 --> cd testgit2 创建

3.远程clone 到本地
git clone https://github.com/tiger-lhc/banana.git
origin/master

现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，
于是可以使用命令创建本地dev分支：
git checkout  –b dev origin/dev

不同的人对,同样的文件同个地方作了修改，冲突

解决方法:
1.先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，
解决冲突，再推送。
git pull

git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，
根据提示，设置dev和origin/dev的链接
----------------------------------------------------
git branch --set-upstream-to=origin/dev 建立连接
git pull 抓取最新提交并合拼，有冲突
----------------------------------------------------

总结:

多人协作工作模式一般是这样的：

    1.首先，可以试图用git push origin branch-name推送自己的修改.
    2.如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。
    3.如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。

============================
Git 基本常用命令

　 mkdir：         XX (创建一个空目录 XX指目录名)

　　pwd：          显示当前目录的路径。

　　git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。

　　git add XX       把xx文件添加到暂存区去。

　　git commit –m “XX”  提交文件 –m 后面的是注释。

　　git status        查看仓库状态

　　git diff  XX      查看XX文件修改了那些内容

　　git log          查看历史记录

　　git reset  --hard HEAD^ 或者 git reset  --hard HEAD~ 回退到上一个版本

　　(如果想回退到100个版本，使用git reset –hard HEAD~100 )

　　cat XX         查看XX文件内容

　　git reflog       查看历史记录的版本号id

　　git checkout -- XX  把XX文件在工作区的修改全部撤销。

　　git rm XX          删除XX文件

　　git remote add origin https://github.com/tiger-lhc/testgit 关联一个远程库

　　git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库

　　git clone https://github.com/tiger-lhc/testgit  从远程库中克隆

　　git checkout –b dev  创建dev分支 并切换到dev分支上

　　git branch  查看当前所有的分支

　　git checkout master 切换回master分支

　　git merge dev    在当前的分支上合并dev分支

　　git branch –d dev 删除dev分支

　　git branch name  创建分支

　　git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作

　　git stash list 查看所有被隐藏的文件列表

　　git stash apply 恢复被隐藏的文件，但是内容不删除

　　git stash drop 删除文件

　　git stash pop 恢复文件的同时 也删除文件

　　git remote 查看远程库的信息

　　git remote –v 查看远程库的详细信息

　　git push origin master  Git会把master分支推送到远程库对应的远程分支上

    git branch --set-upstream-to=origin/dev 建立分支连接

    git pull 抓取最新提交并合拼，若有冲突,解决冲突

    git pull --rebase origin master 【注：pull=fetch+merge]

===========================================================

linux git

git remote add origin https://github.com/tiger-lhc/apple.git

fatal: remote origin already exists.

then:git remote rm origin 

git push -u origin master









































